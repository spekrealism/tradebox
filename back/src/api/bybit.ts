import ccxt, { Exchange, Order, Ticker, OrderBook, Balances, Position } from 'ccxt';
import { config } from '../config';
import { RateLimiter } from './rate-limiter';
import { BybitWebSocket } from './bybit-websocket';

export interface TradeSignal {
  symbol: string;
  side: 'buy' | 'sell';
  amount: number;
  price?: number;
  type: 'market' | 'limit';
}

class BybitApi {
  private exchange: Exchange;
  private publicExchange: Exchange;
  private rateLimiter: RateLimiter;
  private publicWs: BybitWebSocket;
  private privateWs: BybitWebSocket;
  private serverTimeOffset: number = 0;
  private lastTimeSync: number = 0;

  constructor() {
    const exchangeOptions = {
      apiKey: config.bybit.apiKey,
      secret: config.bybit.apiSecret,
      options: {
        recvWindow: 10000, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥
      }
    };

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (—Å –∫–ª—é—á–∞–º–∏) –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö/–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    this.exchange = new ccxt.bybit(exchangeOptions);

    // –ü—É–±–ª–∏—á–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ‚Äî –±–µ–∑ –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã Bybit –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª –ø–æ–¥–ø–∏—Å—å –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª 10003
    this.publicExchange = new ccxt.bybit({
      options: {
        recvWindow: 10000, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥
      },
    });

    if (config.bybit.testnet) {
      this.publicExchange.setSandboxMode(true);
      this.exchange.setSandboxMode(true);
    }

    // –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: 200 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 60 —Å–µ–∫—É–Ω–¥
    this.rateLimiter = new RateLimiter(200, 60000);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.publicWs = new BybitWebSocket(false);
    this.privateWs = new BybitWebSocket(true);
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Bybit
  private async syncServerTime(): Promise<void> {
    const now = Date.now();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
    if (now - this.lastTimeSync < 300000) {
      return;
    }

    try {
      await this.rateLimiter.waitForSlot();
      const serverTime = await this.publicExchange.fetchTime();
      
      if (serverTime) {
        this.serverTimeOffset = serverTime - now;
        this.lastTimeSync = now;
        console.log(`üïê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å Bybit: offset ${this.serverTimeOffset}ms`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º offset
  private getCurrentTimestamp(): number {
    return Date.now() + this.serverTimeOffset;
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π
  private async makeRequest<T>(requestFunc: () => Promise<T>, retries: number = 3): Promise<T> {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        await this.rateLimiter.waitForSlot();
        await this.syncServerTime();
        
        const result = await requestFunc();
        this.rateLimiter.resetBackoff();
        return result;
      } catch (error: any) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ rate limit
        if (error.message?.includes('Rate limit') || 
            error.message?.includes('Too many visits') || 
            error.message?.includes('403') ||
            error.message?.includes('10006')) {
          
          console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ rate limit, –ø—Ä–∏–º–µ–Ω—è–µ–º backoff...');
          await this.rateLimiter.handleRateLimitError();
          
          if (attempt === retries) {
            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ rate limit');
          }
          continue;
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (attempt === retries) {
          throw error;
        }
      }
    }
    
    throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ makeRequest');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  async initializeWebSockets(): Promise<void> {
    try {
      await this.publicWs.connect();
      
      if (config.bybit.apiKey && config.bybit.apiSecret) {
        await this.privateWs.connect();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:', error);
      throw error;
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ WebSocket
  subscribeToTicker(symbol: string, callback: Function): void {
    const topic = `tickers.${symbol}`;
    this.publicWs.subscribe(topic, callback);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ WebSocket
  subscribeToOrderBook(symbol: string, depth: number = 25, callback: Function): void {
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Bybit V5: orderBook.{depth}.{symbol}
    const topic = `orderBook.${depth}.${symbol}`;
    this.publicWs.subscribe(topic, callback);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ WebSocket
  subscribeToTrades(symbol: string, callback: Function): void {
    const topic = `publicTrade.${symbol}`;
    this.publicWs.subscribe(topic, callback);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket
  subscribeToPositions(callback: Function): void {
    if (!config.bybit.apiKey) {
      throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫');
    }
    this.privateWs.subscribe('position', callback);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket
  subscribeToOrders(callback: Function): void {
    if (!config.bybit.apiKey) {
      throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫');
    }
    this.privateWs.subscribe('order', callback);
  }

  public async fetchOHLCV(symbol: string, timeframe = '1h', since?: number, limit?: number) {
    return this.makeRequest(async () => {
      if (!this.publicExchange.has['fetchOHLCV']) {
        throw new Error(`The exchange does not have fetchOHLCV method`);
      }

      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–ª—è ${symbol}... (${this.rateLimiter.getRequestsCount()}/200 –∑–∞–ø—Ä–æ—Å–æ–≤)`);
      const ohlcv = await this.publicExchange.fetchOHLCV(symbol, timeframe, since, limit);
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${ohlcv.length} —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}`);
      return ohlcv;
    });
  }

  public async fetchTicker(symbol: string): Promise<Ticker> {
    return this.makeRequest(async () => {
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è ${symbol}...`);
      const ticker = await this.publicExchange.fetchTicker(symbol);
      return ticker;
    });
  }

  public async fetchOrderBook(symbol: string, limit?: number): Promise<OrderBook> {
    return this.makeRequest(async () => {
      const orderBook = await this.publicExchange.fetchOrderBook(symbol, limit);
      return orderBook;
    });
  }

  public async fetchBalance(): Promise<Balances> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      const balance = await this.exchange.fetchBalance();
      return balance;
    });
  }

  public async createOrder(signal: TradeSignal): Promise<Order> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
      }

      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: ${signal.side} ${signal.amount} ${signal.symbol} –ø–æ ${signal.price || '—Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ'}`);
      
      const order = await this.exchange.createOrder(
        signal.symbol,
        signal.type,
        signal.side,
        signal.amount,
        signal.price
      );
      
      console.log(`‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ${order.id}`);
      return order;
    });
  }

  public async cancelOrder(orderId: string, symbol: string): Promise<any> {
    return this.makeRequest(async () => {
      const order = await this.exchange.cancelOrder(orderId, symbol);
      console.log(`‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: ${orderId}`);
      return order;
    });
  }

  public async fetchOpenOrders(symbol?: string): Promise<Order[]> {
    return this.makeRequest(async () => {
      const orders = await this.exchange.fetchOpenOrders(symbol);
      return orders;
    });
  }

  public async fetchPositions(symbols?: string[]): Promise<Position[]> {
    return this.makeRequest(async () => {
      const positions = await this.exchange.fetchPositions(symbols);
      return positions.filter(pos => pos.contracts && pos.contracts !== 0); // –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö
  public async fetchMarkets(): Promise<any> {
    return this.makeRequest(async () => {
      const markets = await this.exchange.fetchMarkets();
      return markets;
    });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiter
  public getRateLimiterStats(): { requests: number, maxRequests: number } {
    return {
      requests: this.rateLimiter.getRequestsCount(),
      maxRequests: 200
    };
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  public disconnect(): void {
    this.publicWs.disconnect();
    this.privateWs.disconnect();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
  public getWebSocketStatus(): { public: boolean, private: boolean } {
    return {
      public: this.publicWs.isConnected(),
      private: this.privateWs.isConnected()
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
  public async createSubAccount(username: string, memberType: 1 | 6 = 1, note?: string): Promise<any> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
      }

      const params = {
        username,
        memberType, // 1 - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç, 6 - –∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω—ã–π
        ...(note && { note })
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç Bybit V5 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞
      const response = await (this.exchange as any).privatePostV5UserCreateSubMember(params);
      return response;
    });
  }

  public async getSubAccounts(): Promise<any> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
      }

      const response = await (this.exchange as any).privateGetV5UserQuerySubMembers();
      return response;
    });
  }

  public async createSubAccountApiKey(subUid: string, permissions: string[] = ['Trade']): Promise<any> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
      }

      const params = {
        subuid: subUid,
        readOnly: 0, // 0 - –º–æ–∂–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, 1 - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        permissions: permissions.join(','), // 'Trade', 'Wallet', 'Options', 'Derivatives', 'CopyTrading', 'BlockTrade', 'Exchange', 'NFT'
      };

      const response = await (this.exchange as any).privatePostV5UserCreateSubApiKey(params);
      return response;
    });
  }

  public async getSubAccountBalance(subUid: string, accountType: string = 'UNIFIED'): Promise<any> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
      }

      const params = {
        memberId: subUid,
        accountType // UNIFIED, CONTRACT, SPOT
      };

      const response = await (this.exchange as any).privateGetV5AssetTransferQuerySubMemberList(params);
      return response;
    });
  }

  public async transferToSubAccount(
    subUid: string, 
    coin: string, 
    amount: string, 
    fromAccountType: string = 'UNIFIED',
    toAccountType: string = 'UNIFIED'
  ): Promise<any> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
      }

      const params = {
        transferId: Date.now().toString(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
        coin,
        amount,
        fromMemberId: await this.getCurrentUid(), // –ì–ª–∞–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        toMemberId: subUid,
        fromAccountType,
        toAccountType
      };

      const response = await (this.exchange as any).privatePostV5AssetTransferInterTransfer(params);
      return response;
    });
  }

  public async getCurrentUid(): Promise<string> {
    return this.makeRequest(async () => {
      if (!config.bybit.apiKey) {
        throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      const response = await (this.exchange as any).privateGetV5UserQueryApi();
      return response.result.uid;
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞
  public createSubAccountInstance(apiKey: string, secret: string): BybitApi {
    const subAccountConfig = {
      ...config,
      bybit: {
        ...config.bybit,
        apiKey,
        apiSecret: secret
      }
    };

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞
    const subAccountApi = new BybitApi();
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º exchange –¥–ª—è —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞
    const exchangeOptions = {
      apiKey,
      secret,
      options: {
        recvWindow: 10000,
      }
    };

    subAccountApi.exchange = new ccxt.bybit(exchangeOptions);
    
    if (config.bybit.testnet) {
      subAccountApi.exchange.setSandboxMode(true);
    }

    return subAccountApi;
  }
}

export const bybitApi = new BybitApi(); 