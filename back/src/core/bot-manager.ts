import { TradingBot, TradeRecord, SubAccountInfo } from '../types';
import { bybitApi } from '../api/bybit';
import { MLTradingStrategy, MLPrediction } from '../strategies/ml-strategy';
import { OpenAITradingStrategy, OpenAIPrediction, MarketData } from '../strategies/openai-strategy';
import { 
  createTradingBot, 
  getAllTradingBots, 
  getTradingBotById, 
  updateTradingBot, 
  deleteTradingBot,
  createTradeRecord,
  getTradeHistory,
  fetchOHLCVFromDb
} from '../db';
import { v4 as uuidv4 } from 'uuid';

export class BotManager {
  private activeBots: Map<string, BotInstance> = new Map();
  private intervals: Map<string, NodeJS.Timeout> = new Map();

  async createBot(config: {
    name: string;
    description?: string;
    strategy: 'ml' | 'openai';
    tradingPairs: string[];
    positionSize: number;
    maxDrawdown: number;
    riskLevel: 'low' | 'medium' | 'high';
    initialBalance: number;
  }): Promise<string> {
    try {
      // 1. –°–æ–∑–¥–∞–µ–º —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç –≤ Bybit
      const username = `bot_${config.name.toLowerCase().replace(/\s+/g, '_')}_${Date.now()}`;
      const subAccount = await bybitApi.createSubAccount(username, 1, config.description);
      
      if (!subAccount.result) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç –≤ Bybit');
      }

      const subAccountId = subAccount.result.uid;

      // 2. –°–æ–∑–¥–∞–µ–º API –∫–ª—é—á–∏ –¥–ª—è —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞
      const apiKeyResponse = await bybitApi.createSubAccountApiKey(subAccountId, ['Trade', 'Wallet']);
      
      if (!apiKeyResponse.result) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª—é—á–∏ –¥–ª—è —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç–∞');
      }

      const { id: apiKey, secret } = apiKeyResponse.result;

      // 3. –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–±-–∞–∫–∫–∞—É–Ω—Ç
      if (config.initialBalance > 0) {
        await bybitApi.transferToSubAccount(
          subAccountId, 
          'USDT', 
          config.initialBalance.toString()
        );
      }

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –≤ –ë–î
      const botData: Omit<TradingBot, 'id' | 'createdAt' | 'updatedAt'> = {
        name: config.name,
        description: config.description,
        strategy: config.strategy,
        status: 'paused',
        subAccountId,
        subAccountUsername: username,
        apiKey,
        apiSecret: secret,
        tradingPairs: config.tradingPairs,
        positionSize: config.positionSize,
        maxDrawdown: config.maxDrawdown,
        riskLevel: config.riskLevel,
        totalTrades: 0,
        winningTrades: 0,
        totalPnL: 0,
        currentBalance: config.initialBalance,
        initialBalance: config.initialBalance
      };

      const botId = await createTradingBot(botData);
      
      console.log(`‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç "${config.name}" —Å–æ–∑–¥–∞–Ω —Å ID: ${botId}`);
      return botId;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  async startBot(botId: string): Promise<void> {
    const bot = await getTradingBotById(botId);
    if (!bot) {
      throw new Error(`–ë–æ—Ç —Å ID ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (this.activeBots.has(botId)) {
      throw new Error(`–ë–æ—Ç ${bot.name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω`);
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const botInstance = new BotInstance(bot);
    await botInstance.initialize();
    
    this.activeBots.set(botId, botInstance);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await updateTradingBot(botId, { status: 'active' });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
    const interval = setInterval(async () => {
      try {
        await botInstance.executeTradingCycle();
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞ ${bot.name}:`, error);
        await this.handleBotError(botId, error);
      }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    this.intervals.set(botId, interval);
    
    console.log(`üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç "${bot.name}" –∑–∞–ø—É—â–µ–Ω`);
  }

  async stopBot(botId: string): Promise<void> {
    const bot = await getTradingBotById(botId);
    if (!bot) {
      throw new Error(`–ë–æ—Ç —Å ID ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    const interval = this.intervals.get(botId);
    if (interval) {
      clearInterval(interval);
      this.intervals.delete(botId);
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    const botInstance = this.activeBots.get(botId);
    if (botInstance) {
      await botInstance.cleanup();
      this.activeBots.delete(botId);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await updateTradingBot(botId, { status: 'stopped' });
    
    console.log(`‚èπÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç "${bot.name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
  }

  async pauseBot(botId: string): Promise<void> {
    const bot = await getTradingBotById(botId);
    if (!bot) {
      throw new Error(`–ë–æ—Ç —Å ID ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    const interval = this.intervals.get(botId);
    if (interval) {
      clearInterval(interval);
      this.intervals.delete(botId);
    }

    await updateTradingBot(botId, { status: 'paused' });
    
    console.log(`‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç "${bot.name}" –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
  }

  async deleteBot(botId: string): Promise<void> {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await this.stopBot(botId);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    await deleteTradingBot(botId);
    
    console.log(`üóëÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É–¥–∞–ª–µ–Ω`);
  }

  async getAllBots(): Promise<TradingBot[]> {
    return getAllTradingBots();
  }

  async getBotById(botId: string): Promise<TradingBot | null> {
    return getTradingBotById(botId);
  }

  async getBotTradeHistory(botId: string, limit: number = 100): Promise<TradeRecord[]> {
    return getTradeHistory(botId, limit);
  }

  async getBotBalance(botId: string): Promise<any> {
    const bot = await getTradingBotById(botId);
    if (!bot) {
      throw new Error(`–ë–æ—Ç —Å ID ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    try {
      const balance = await bybitApi.getSubAccountBalance(bot.subAccountId);
      return balance;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ ${bot.name}:`, error);
      throw error;
    }
  }

  private async handleBotError(botId: string, error: any): Promise<void> {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ ${botId}:`, error);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    await this.stopBot(botId);
    await updateTradingBot(botId, { status: 'error' });
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
  async cleanup(): Promise<void> {
    const promises = Array.from(this.activeBots.keys()).map(botId => this.stopBot(botId));
    await Promise.all(promises);
  }
}

class BotInstance {
  private bot: TradingBot;
  private bybitInstance: any;
  private strategy!: MLTradingStrategy | OpenAITradingStrategy;
  private lastSignalTimestamp: number = 0;

  constructor(bot: TradingBot) {
    this.bot = bot;
  }

  async initialize(): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Bybit API –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    this.bybitInstance = bybitApi.createSubAccountInstance(this.bot.apiKey, this.bot.apiSecret);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    if (this.bot.strategy === 'ml') {
      this.strategy = new MLTradingStrategy();
    } else if (this.bot.strategy === 'openai') {
      this.strategy = new OpenAITradingStrategy();
    } else {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ${this.bot.strategy}`);
    }

    console.log(`ü§ñ –ë–æ—Ç "${this.bot.name}" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π ${this.bot.strategy}`);
  }

  async executeTradingCycle(): Promise<void> {
    for (const symbol of this.bot.tradingPairs) {
      try {
        await this.processTradingPair(symbol);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã ${symbol} –¥–ª—è –±–æ—Ç–∞ ${this.bot.name}:`, error);
      }
    }
  }

  private async processTradingPair(symbol: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const ohlcv = await fetchOHLCVFromDb(symbol, '1h', 100);
      if (ohlcv.length === 0) {
        console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö OHLCV –¥–ª—è ${symbol}`);
        return;
      }

      const currentPrice = ohlcv[ohlcv.length - 1][4]; // close price
      
      let prediction: MLPrediction | OpenAIPrediction;

      if (this.bot.strategy === 'ml') {
        const mlInput = {
          symbol,
          currentPrice,
          ohlcv: ohlcv.map(([timestamp, open, high, low, close, volume]) => ({
            timestamp,
            open,
            high,
            low,
            close,
            volume
          }))
        };
        prediction = await (this.strategy as MLTradingStrategy).getPrediction(mlInput);
      } else {
        const marketData: MarketData = {
          symbol,
          currentPrice,
          ohlcv: ohlcv.map(([timestamp, open, high, low, close, volume]) => ({
            timestamp,
            open,
            high,
            low,
            close,
            volume
          })),
          technicalIndicators: {} // –î–æ–±–∞–≤–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        };
        prediction = await (this.strategy as OpenAITradingStrategy).getPrediction(marketData);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–¥–µ–ª–∫—É
      if (this.shouldExecuteTrade(prediction)) {
        await this.executeTrade(symbol, prediction, currentPrice);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ –¥–ª—è ${symbol}:`, error);
      throw error;
    }
  }

  private shouldExecuteTrade(prediction: MLPrediction | OpenAIPrediction): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª –Ω–µ HOLD
    if (prediction.signal === 'HOLD') {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const minConfidence = this.bot.riskLevel === 'low' ? 0.8 : 
                         this.bot.riskLevel === 'medium' ? 0.6 : 0.4;
    
    if (prediction.confidence < minConfidence) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    if (prediction.timestamp <= this.lastSignalTimestamp) {
      return false;
    }

    return true;
  }

  private async executeTrade(symbol: string, prediction: MLPrediction | OpenAIPrediction, currentPrice: number): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      const order = await this.bybitInstance.createOrder({
        symbol,
        side: prediction.signal.toLowerCase() as 'buy' | 'sell',
        amount: this.bot.positionSize,
        type: 'market'
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
      const tradeRecord: Omit<TradeRecord, 'id'> = {
        botId: this.bot.id,
        symbol,
        side: prediction.signal.toLowerCase() as 'buy' | 'sell',
        amount: this.bot.positionSize,
        price: currentPrice,
        timestamp: new Date().toISOString(),
        orderId: order.id,
        signal: {
          type: this.bot.strategy as 'ml' | 'openai',
          confidence: prediction.confidence,
          reasoning: prediction.reasoning
        }
      };

      await createTradeRecord(tradeRecord);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
      await updateTradingBot(this.bot.id, {
        totalTrades: this.bot.totalTrades + 1,
        lastTradeAt: new Date().toISOString()
      });

      this.lastSignalTimestamp = prediction.timestamp;

      console.log(`‚úÖ –ë–æ—Ç "${this.bot.name}" –≤—ã–ø–æ–ª–Ω–∏–ª —Å–¥–µ–ª–∫—É: ${prediction.signal} ${symbol} –ø–æ ${currentPrice}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è –±–æ—Ç–∞ ${this.bot.name}:`, error);
      throw error;
    }
  }

  async cleanup(): Promise<void> {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞ "${this.bot.name}"`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
export const botManager = new BotManager(); 