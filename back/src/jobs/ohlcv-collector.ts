import cron from 'node-cron';
import { bybitApi } from '../api/bybit';
import { saveOHLCVBulk, OHLCVRecord } from '../db';

const SYMBOLS = ['BTCUSDT'];
const TIMEFRAME = '1m';
const LIMIT = 10; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 60 –¥–æ 10 - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç

export function startCollector() {
  // –ò–∑–º–µ–Ω–µ–Ω–æ —Å –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  cron.schedule('*/5 * * * *', async () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ OHLCV collector...');
    
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      for (let i = 0; i < SYMBOLS.length; i++) {
        const symbol = SYMBOLS[i];
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        if (i > 0) {
          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        }
        
        try {
          console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}...`);
          const candles = await bybitApi.fetchOHLCV(symbol, TIMEFRAME, undefined, LIMIT);
          
          const mapped: OHLCVRecord[] = candles.map(([ts, o, h, l, c, v]) => ({
            symbol,
            timeframe: TIMEFRAME,
            timestamp: Number(ts),
            open: Number(o),
            high: Number(h),
            low: Number(l),
            close: Number(c),
            volume: Number(v),
          }));
          
          await saveOHLCVBulk(symbol, TIMEFRAME, mapped);
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${mapped.length} —Å–≤–µ—á–µ–π –¥–ª—è ${symbol}`);
        } catch (symbolError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ ${symbol}:`, symbolError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è
        }
      }
      
      console.log('üì• OHLCV –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ TimescaleDB');
    } catch (err) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OHLCV collector:', err);
    }
  });
  
  console.log('‚è≤Ô∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ OHLCV Collector –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
} 