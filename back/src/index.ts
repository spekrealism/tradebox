import { startServer } from './server';
import { bybitApi } from './api/bybit';

async function main() {
  console.log("ü§ñ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞...");

  try {
    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ —Å API
    await startServer();

    // –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å WebSocket –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    setTimeout(async () => {
      console.log("üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –ø–æ–¥–ø–∏—Å–æ–∫...");
      
      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä BTC/USDT
      bybitApi.subscribeToTicker('BTCUSDT', (data: any) => {
        if (process.env.ENABLE_WEBSOCKET_LOGS === 'true') {
          console.log('üìä –¢–∏–∫–µ—Ä BTCUSDT:', {
            price: data.data?.lastPrice,
            volume: data.data?.volume24h,
            timestamp: new Date(data.ts).toISOString()
          });
        }
      });

      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤
      bybitApi.subscribeToOrderBook('BTCUSDT', 25, (data: any) => {
        if (process.env.ENABLE_WEBSOCKET_LOGS === 'true') {
          console.log('üìñ –ö–Ω–∏–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤ BTCUSDT –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
            bids: data.data?.b?.length || 0,
            asks: data.data?.a?.length || 0,
            timestamp: new Date(data.ts).toISOString()
          });
        }
      });

      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏
      bybitApi.subscribeToTrades('BTCUSDT', (data: any) => {
        if (process.env.ENABLE_WEBSOCKET_LOGS === 'true') {
          console.log('üí∞ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ BTCUSDT:', {
            price: data.data?.[0]?.p,
            size: data.data?.[0]?.v,
            side: data.data?.[0]?.S,
            timestamp: new Date(data.ts).toISOString()
          });
        }
      });

      console.log("‚úÖ WebSocket –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    }, 3000);

    // –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API
    setTimeout(async () => {
      try {
        console.log("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");
        const symbol = 'BTCUSDT';
        const limit = 5;
        const ohlcv = await bybitApi.fetchOHLCV(symbol, '1h', undefined, limit);

        console.log(`\n--- –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${limit} —Å–≤–µ—á–µ–π –¥–ª—è ${symbol} ---`);
        ohlcv.forEach(candle => {
          if (candle[0]) {
            console.log({
              timestamp: new Date(candle[0]).toISOString(),
              open: candle[1],
              high: candle[2],
              low: candle[3],
              close: candle[4],
              volume: candle[5],
            });
          }
        });
        console.log("------------------------------------\n");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
      }
    }, 5000);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
}

main(); 